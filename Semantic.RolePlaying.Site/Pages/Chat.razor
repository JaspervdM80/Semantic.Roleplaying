@page "/"
@using Semantic.Roleplaying.Engine.Services
@using Semantic.Roleplaying.Engine.Models.Scenario
@inject IRoleplayService RoleplayService
@inject IChatState ChatState
@inject IJSRuntime JS
@implements IDisposable

<PageTitle>Roleplay Chat</PageTitle>

<div class="chat-container">
	<ChatHeader Title="Birthday Sleepover" />

	@if (initialized)
	{
		<ScenarioOverview Scenario="scenario!" />

		<ChatMessages @ref="messagesComponent"
					  Messages="ChatState.Messages"
					  OnScrollToBottom="ScrollToBottom" />

		<ChatInput Message="@currentMessage"
				   MessageChanged="@((value) => currentMessage = value)"
				   OnSend="SendMessage" />

		<div class="spinner-overlay @(isResponding ? "visible" : "")">
			<div class="spinner"></div>
			<div class="spinner-text">Waiting for response...</div>
		</div>
	}
	else
	{
		<div class="loading-initial">
			<div class="spinner"></div>
			<div>Loading scenario...</div>
		</div>
	}
</div>

@code {
	private string currentMessage = "";
	private bool initialized;
	private bool isResponding;
	private ChatMessages? messagesComponent;
	private ScenarioContext? scenario;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await InitializeChatAsync();
			initialized = true;
			StateHasChanged();
		}
	}

	private async Task InitializeChatAsync()
	{
		try
		{
			await RoleplayService.LoadScenario();
			scenario = RoleplayService.GetScenarioContext();

			var history = RoleplayService.GetChatHistory();
			foreach (var msg in history.Where(m => !m.Role.Equals("system", StringComparison.OrdinalIgnoreCase)))
			{
				ProcessMessage(msg.Content ?? string.Empty,
					msg.Role.Equals("user", StringComparison.OrdinalIgnoreCase));
			}

			if (!history.Any(m => !m.Role.Equals("system", StringComparison.OrdinalIgnoreCase)))
			{
				var response = await RoleplayService.GetResponseAsync("");
				ProcessMessage(response, false);
			}

			ChatState.OnChange += StateHasChanged;
			await ScrollToBottom();
		}
		catch (Exception ex)
		{
			// Handle error appropriately
			Console.WriteLine($"Error initializing chat: {ex.Message}");
		}
	}

	private async Task SendMessage()
	{
		if (string.IsNullOrWhiteSpace(currentMessage)) return;

		var userMessage = currentMessage;
		currentMessage = string.Empty;
		StateHasChanged();

		ProcessMessage(userMessage, true);

		isResponding = true;
		StateHasChanged();

		try
		{
			var response = await RoleplayService.GetResponseAsync(userMessage);
			ProcessMessage(response, false);
		}
		finally
		{
			isResponding = false;
			StateHasChanged();
		}

		await ScrollToBottom();
	}

    private void ProcessMessage(string content, bool isUser)
    {
        var message = new Models.ChatMessage
        {
            Timestamp = DateTime.Now,
            IsUserMessage = isUser,
            Character = isUser ? "Jasper" : "",
            Content = content,
            Responses = isUser ? new() : ParseCharacterResponses(content)
        };

        ChatState.AddMessage(message);
    }

    private List<Models.CharacterResponse> ParseCharacterResponses(string content)
    {
        var responses = new List<Models.CharacterResponse>();
        var lines = content.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        
        Models.CharacterResponse? currentResponse = null;
        
        foreach (var line in lines)
        {
            var match = System.Text.RegularExpressions.Regex.Match(line, @"^\[(.*?)\](.*)");
            if (match.Success)
            {
                if (currentResponse != null)
                {
                    responses.Add(currentResponse);
                }
                
                currentResponse = new Models.CharacterResponse
                {
                    Character = match.Groups[1].Value.Trim(),
                    Content = match.Groups[2].Value.Trim()
                };
            }
            else if (currentResponse != null)
            {
                currentResponse.Content += "\n" + line.Trim();
            }
        }
        
        if (currentResponse != null)
        {
            responses.Add(currentResponse);
        }
        
        return responses;
    }

    private async Task ScrollToBottom()
    {
        if (messagesComponent != null)
        {
            await messagesComponent.ScrollToBottomAsync();
        }
    }

    public void Dispose()
    {
        ChatState.OnChange -= StateHasChanged;
    }
}