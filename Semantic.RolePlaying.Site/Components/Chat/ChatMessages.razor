@using Semantic.Roleplaying.Engine.Models.Scenario
@using Semantic.Roleplaying.Engine.Services
@inject IRoleplayService RoleplayService
@inject IJSRuntime JS

<div class="messages-container" @ref="messagesDiv">
	<Virtualize Items="Messages" Context="message" TItem="ChatMessage">
		@if (!string.IsNullOrEmpty(message.Content))
		{
			<div class="message-box">
				<div class="message-box-header">
					@(message.IsUserMessage ? _userName : _aiName)
				</div>
				<div class="message-container">
					@if (message.IsUserMessage)
					{
						<div class="message-row">
							<div class="message-sender">@(_userName)</div>
							<div class="message-content">
								@((MarkupString)FormatMessage(message.Content))
							</div>
						</div>
					}
					else
					{
						<div class="message-row">
							<div class="message-sender">@(_aiName)</div>
							<div class="message-content">
								@((MarkupString)FormatMessage(message.Content))
							</div>
						</div>
					}
				</div>
			</div>
		}
	</Virtualize>
</div>

@code {
	[Parameter, EditorRequired]
	public List<ChatMessage> Messages { get; set; } = null!;

	[Parameter]
	public EventCallback OnScrollToBottom { get; set; }

	private ElementReference messagesDiv;

	private record DialoguePart(string Character, string Content, string Emotion, bool IsNarrative);
	private record Response(string Character, string Content);

	private string? _userName;
	private string? _aiName;

	protected override void OnInitialized()
	{
		_userName = RoleplayService.ScenarioContext?.PlayerCharacter.Name ?? "User";
		_aiName = RoleplayService.ScenarioContext?.ModuleInfo.Name ?? "AI";
	}

	public async Task ScrollToBottomAsync()
	{
		await JS.InvokeVoidAsync("scrollToBottom", messagesDiv);
	}

	private string GetMessageClass(ChatMessage message) =>
		message.IsUserMessage ? "user" : "character";

	private List<DialoguePart> ParseNarrativeAndDialogue(string message)
	{
		var parts = new List<DialoguePart>();
		var lines = message.Split('\n', StringSplitOptions.RemoveEmptyEntries);

		foreach (var line in lines)
		{
			if (line.StartsWith("["))
			{
				// Parse character dialogue
				var match = System.Text.RegularExpressions.Regex.Match(line, @"\[(.*?)\](.*?)(?:\s+\*(.*?)\*)?(.*)");
				if (match.Success)
				{
					var character = match.Groups[1].Value.Trim();
					var emotion = match.Groups[3].Value.Trim();
					var content = match.Groups[4].Value.Trim();
					parts.Add(new DialoguePart(character, content, emotion, false));
				}
			}
			else
			{
				// Narrative text
				parts.Add(new DialoguePart("", line.Trim(), "", true));
			}
		}

		return parts;
	}
	
	private List<Response> ParseResponses(string content)
	{
		var responses = new List<Response>();
		var lines = content.Split('\n', StringSplitOptions.RemoveEmptyEntries);

		foreach (var line in lines)
		{
			var match = System.Text.RegularExpressions.Regex.Match(line, @"^\[([^\]]+)\](?:\s*:)?\s*(.*)$");
			if (match.Success)
			{
				responses.Add(new Response(
					match.Groups[1].Value.Trim(),
					match.Groups[2].Value.Trim()
				));
			}
			else
			{
				// For narrative text without a character name
				responses.Add(new Response(
					"",
					$"<span class='narrative'>{line.Trim()}</span>"
				));
			}
		}
		return responses;
	}

	private string FormatMessage(string message)
	{
		// Remove character names in brackets if any
		message = System.Text.RegularExpressions.Regex.Replace(message, @"^\[([^\]]+)\]\s*", "");

		// Convert text with asterisks to emotion spans
		message = System.Text.RegularExpressions.Regex.Replace(
			message,
			@"\*(.*?)\*",
			"<span class='emotion'>$1</span>"
		);

		// Convert quoted text
		message = System.Text.RegularExpressions.Regex.Replace(
			message,
			@"""([^""]+)""",
			"<span class='quoted'>$1</span>"
		);

		return message;
	}
}